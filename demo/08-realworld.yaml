apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: lint
spec:
  params:
    - name: pathContext
      description: Path to application inside git
      default: "."
      type: string
  resources:
    inputs:
      - name: repo
        type: git
  steps:
    - name: npm-install
      image: node:14
      command:
        - /bin/bash
      args: ['-c', 'cd repo/$(params.pathContext) && npm install']
    - name: npm-lint
      image: node:14
      command:
        - /bin/bash
      args: ['-c', 'cd repo/$(params.pathContext) && npm run lint']
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: test
spec:
  params:
    - name: pathContext
      description: Path to application inside git
      default: "."
      type: string
  resources:
    inputs:
      - name: repo
        type: git
  steps:
    - name: npm-install
      image: node:14
      command:
        - /bin/bash
      args: ['-c', 'cd repo/$(params.pathContext) && npm install']
    - name: npm-test
      image: node:14
      command:
        - /bin/bash
      args: ['-c', 'cd repo/$(params.pathContext) && npm run test']
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: app-deploy
spec:
  params:
    - name: user
      type: string
      description: User name for registry
    - name: pass
      type: string
      description: Registry password
  resources:
    - name: git-repo
      type: git
    - name: final-image
      type: image
  tasks:
    - name: lint
      taskRef:
        name: lint
      params:
        - name: pathContext
          value: app
      resources:
        inputs:
          - name: repo
            resource: git-repo
    - name: test
      taskRef:
        name: test
      params:
        - name: pathContext
          value: app
      resources:
        inputs:
          - name: repo
            resource: git-repo
    - name: build-and-deploy
      params:
        - name: user
          value: $(params.user)
        - name: pass
          value: $(params.pass)
      taskRef:
        name: s2i-nodejs
      resources:
        inputs:
          - name: repo
            resource: git-repo
        outputs:
          - name: final-image
            resource: final-image
      runAfter:
        - lint
        - test
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-nodejs
spec:
  params: 
    - name: user
      type: string
    - name: pass
      type: string
  resources:
    inputs:
      - name: repo
        type: git
    outputs:
      - name: final-image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingDir: /workspace/repo/app
      command: ["s2i", "build", ".", "registry.access.redhat.com/ubi8/nodejs-12", "--as-dockerfile", "/gensource/Dockerfile.gen"]
      volumeMounts:
        - name: gensource
          mountPath: /gensource
    - name: build
      image: quay.io/buildah/stable
      workingDir: /gensource
      command: ["buildah", "bud", "--tls-verify=false", "--layers", "-f", "/gensource/Dockerfile.gen", "-t", "$(outputs.resources.final-image.url)", "."]
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gensource
          mountPath: /gensource
      securityContext: 
        privileged: true
    - name: push
      image: quay.io/buildah/stable
      command: ['buildah', 'push', '--creds=$(params.user):$(params.pass)', '--tls-verify=false', '$(outputs.resources.final-image.url)', 'docker://$(outputs.resources.final-image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gensource
      emptyDir: {}